set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
View(dataFrame)
dataFrameSubset=dataFrame(heightsCM>188)
dataFrameSubset=(dataFrame$heightsCM>188)
fix(dataFrameSubset)
dataFrameSubset=(dataFrame,dataFrame$heightsCM>188)
dataFrameSubset=(dataFrame;dataFrame$heightsCM>188)
dataFrameSubset=subset(dataFrame,dataFrame$heightsCM>188)
View(dataFrameSubset)
mean(dataFrameSubset$weightsK)
rcauchy() hlp
rcauchy() help
rcauchy()
set.seed(41)
cauchyValues=rcauchy(100, location = 0, scale = 1)
sample(cauchyValues,size=10,replace=T);
rcauchy
set.seed(41)
cauchyValues=rcauchy(100, location = 0, scale = 1)
set.seed(415)
sample(cauchyValues,size=10,replace=T);
library(ElemStatLearn)
data(SAheart)
View(SAheart)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(testSA)
View(trainSA)
library(pgmm)
install.packages("pgmm")
data(olive)
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
newData = data.frame(Palmitic = 1200, Palmitoleic = 120, Stearic=200,Oleic=7000,Linoleic = 900, Linolenic = 32, Arachidic=60,Eicosenoic=6)
View(newData)
wd
wd()
getwd()
load("5.R.RData")
View(Xy)
View(Xy)
fit <- lm(y ~ X1 + X2 , data=Xy)
summary(fit) # show results
matplot(Xy,type="l")
results <- boot(data=Xy,
formula=y ~ X1 + X2 )
library(boot)
results <- boot(data=Xy,
formula=y ~ X1 + X2 )
results <- boot(data=Xy,  R=default,
formula=y ~ X1 + X2 )
results <- boot(data=Xy,  R=1000,
formula=y ~ X1 + X2 )
results <- boot(data=Xy,  R=1000,statistic=lm(y ~ X1 + X2 ))
results <- boot(data=Xy,  R=1000, statistic=lm( y ~ X1 + X2 ))
boot.fn(Xy,sample(392,392,replace=T))
data(mtcars)
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
install.packages('knitr', dependencies = T)
fileUrl<-"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="data2.csv",method="auto")
DataP<-read.csv("data2.csv")
DataP<-DataP[5:194,]
fileUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2,destfile="data3.csv",method="auto")
DataE<-read.csv("data3.csv")
View(DataE)
View(DataP)
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
View(DataP)
View(DataE)
total <- merge(DataE,DataP,by="CountryCode")
View(total)
attach(mtcars)
newdata<-mtcars[order(CountryCode),]
newdata<-total[order(CountryCode),]
newdata<-total[order("CountryCode"),]
View(newdata)
newdata<-total[order(total[,1]),]
View(newdata)
str(total)
newdata<-total[order(-total[,1]),]
newdata<-total[order(-total[,1]),]
View(newdata)
newdata<-total[order(-total[,1]),]
newdata<-total[order(total[,1]),]
newdata<-total[order(-total[,1]),]
newdata<-total[order(CountryCode)]
newdata<-total[order(total$CountryCode)]
newdata<-total[order("CountryCode")]
newdata<-total[order(-"CountryCode")]
newdata<-total[order("CountryCode")]
View(newdata)
newdata<-total[order(total$CountryCode),]
newdata<-total[order(-total$CountryCode),]
newdata<-total[order(-total$CountryCode),]
View(newdata)
str(total)
as.string(total$CountryCode)
as.character(total$CountryCode)
total$CountryCode<-as.character(total$CountryCode)
str(total)
newdata<-total[order(-total$CountryCode),]
newdata<-total[order(total$CountryCode),]
View(newdata)
newdata<-total[order(total$CountryCode, decreasing = TRUE),]
View(newdata)
newdata<-total[order(total$row.names, decreasing = TRUE),]
View(total)
View(DataE)
View(DataP)
View(DataE)
View(DataP)
View(total)
DataP$row.names<-row.names-1
DataP$row.names<-lapply(row.names-1)
DataP$row.names<-lapply(DataP$row.names-1)
fileUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
DataP$row.names<-as.numeric(DataP$row.names)
str(DataP)
DataP$rownames
DataP$row.names
seq(1, 9, by = 2)
seq(1, 9)
GDP<-sed(1,190)
GDP<-seq(1,190)
GDP
DataP$GDP<-GDP
View(DataP)
fileUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2,destfile="data3.csv",method="auto")
DataE<-read.csv("data3.csv")
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
total <- merge(DataE,DataP,by="CountryCode")
View(total)
newdata<-total[order(total$GDP, decreasing = TRUE),]
View(newdata)
newdata[13]
newdata[2][13]
newdata[1][13]
newdata[1][1]
newdata[1,1]
View(DataP)
View(DataE)
str(DataP)
str(DataE)
total <- merge(DataE,DataP,by="CountryCode",all=FALSE)
total <- merge(DataE,DataP,by="CountryCode",all=FALSE)
newdata<-total[order(total$GDP, decreasing = TRUE),]
View(newdata)
newdata[13,]
newdata[13,2]
newdata[12,2]
high<- subset(newdata,Income.Group=High income: OECD)
high<- subset(newdata,Income.Group="High income: OECD")
View(high)
newdata$Income.Group<-as.character(total$Income.Group)
high<- subset(newdata,Income.Group=High income: OECD)
high<- subset(newdata,Income.Group="High income: OECD")
high<- subset(newdata,newData$Income.Group="High income: OECD")
high<- subset(newdata,newData$Income.Group=="High income: OECD")
high<- subset(newdata,Income.Group=="High income: OECD")
str(high)
average(high$GDP)
mean(high$GDP)
View(high)
mean(high$Gross.domestic.product.2012)
mean(as.numeric(high$Gross.domestic.product.2012))
high<- subset(newdata,Income.Group=="High income:OECD")
high<- subset(newdata,Income.Group=="High income: OECD")
high<- subset(DataP,Income.Group=="High income: OECD")
high<- subset(DataE,Income.Group=="High income: OECD")
mean(as.numeric(high$Gross.domestic.product.2012))
View(high)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
high<- subset(DataE,Income.Group==High income: OECD)
DataE<-read.csv("data3.csv")
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
total <- merge(DataE,DataP,by="CountryCode",all=FALSE)
#total$CountryCode<-as.character(total$CountryCode)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
high<- subset(DataE,Income.Group==High income: OECD)
high<- subset(DataE,Income.Group=="High income: OECD")
mean(as.numeric(high$Gross.domestic.product.2012))
View(high)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(total)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
total$Gross.domestic.product.2012<-as.numeric(total$Gross.domestic.product.2012)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
View(DataE)
colnames(DataP)[colnames(DataP) == "X.2"] <- "Short.Name"
View(DataP)
DataE<-read.csv("data3.csv")
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
colnames(DataP)[colnames(DataP) == "X.2"] <- "Short.Name"
total <- merge(DataE,DataP,by="Short.Name",all=FALSE)
total <- merge(DataE,DataP,by="Short.Name",all=FALSE)
#total$CountryCode<-as.character(total$CountryCode)
total$Gross.domestic.product.2012<-as.numeric(total$Gross.domestic.product.2012)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(total)
View(newdata)
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
colnames(DataP)[colnames(DataP) == "X.2"] <- "Short.Name"
total <- merge(DataE,DataP,by="CountryCode",all=FALSE)
#total$CountryCode<-as.character(total$CountryCode)
total$Gross.domestic.product.2012<-as.numeric(total$Gross.domestic.product.2012)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
total$Gross.domestic.product.2012<-as.numeric(as.character(total$Gross.domestic.product.2012))
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
total$Gross.domestic.product.2012<-as.numeric(as.character(total$Gross.domestic.product.2012))
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
DataP<-read.csv("data2.csv")
DataP<-DataP[5:194,]
GDP<-seq(1,190)
DataP$GDP<-GDP
DataE<-read.csv("data3.csv")
colnames(DataP)[colnames(DataP) == "X"] <- "CountryCode"
#colnames(DataP)[colnames(DataP) == "X.2"] <- "Short.Name"
total <- merge(DataE,DataP,by="CountryCode",all=FALSE)
total$Gross.domestic.product.2012<-as.numeric(as.character(total$Gross.domestic.product.2012))
str(total)
newdata<-total[order(total$Gross.domestic.product.2012, decreasing = TRUE),]
View(newdata)
high<- subset(DataE,Income.Group=="High income: OECD")
mean(as.numeric(high$Gross.domestic.product.2012))
mean(high$Gross.domestic.product.2012)
View(high)
high<- subset(newdata,Income.Group=="High income: OECD")
mean(high$Gross.domestic.product.2012)
table(cut(newdata$Gross.domestic.product.2012,breaks=5),newdata$Income.Group)
table(cut(newdata$Gross.domestic.product.2012,breaks=5),newdata$Income.Group)
table(cut(newdata$Gross.domestic.product.2012,breaks=5),newdata$Income.Group)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("qplot")
install.packages("ggplot2")
data(airquality)
library(ggplo2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies)
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", f)
Data <- read.csv(bzfile("C:/Users/JosePortatil/Documents/GitHub/RepData_PerrAss2/repdata-data-StormData.csv.bz2"))
save.image("~/GitHub/RepData_PerrAss2/hist.RData")
View(Data)
summary(Data)
str(Data)
head(Data$REMARKS)
summary(Data$INJURIES)
summary(Data$FATALITIES)
#Se debe depurar los eventos y ponerlos en categorias.
setwd("C:/Users/JosePortatil/Documents/GitHub/RepData_PerrAss2/")
#Load library
require(car)
str(Data$EVTYPE)
Data$EVTYPE<-with(Data,recode(EVTYPE,"
c('avalanche', 'avalance', 'blizzard', 'chill', 'cold', 'cool', 'glaze', 'hypothermia', 'hyperthermia',
'ice', 'icy', 'freez', 'frost', 'low temp', 'sleet', 'snow', 'wint')='COLD / ICE';
c('below normal precip', 'dry', 'drie', 'drought', 'fire', 'heat', 'high temp', 'hot', 'warm')
='HEAT / DROUGHT / FIRE';
c('fog', 'vog')='FOG';
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain',
'rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
='RAIN / FLOOD / HIGH SEAS';
c('burst', 'cloud', 'depression', 'floyd', 'funnel', 'gust', 'hail', 'hurricane', 'landspout',
'storm', 'southeast', 'thunderstorm', 'thundertsorm', 'thundestorm', 'tornado', 'torndao', 'tstm', 'turbulence', 'typhoon',
'wall', 'waterspout', 'water spout', 'wayterspout', 'wind', 'wnd')
=WIND / STORM / TORNADO';
c('lightning', 'ligntning', 'lighting')='LIGHTNING';
c('tsunami', 'volcan')='VOLCANIC ERUPTION / EARTHQUAKE / TSUNAMI';
c('dust')='DUST'"))
Data$EVTYPE<-with(Data,recode(EVTYPE,"
c('avalanche', 'avalance', 'blizzard', 'chill', 'cold', 'cool', 'glaze', 'hypothermia', 'hyperthermia',
'ice', 'icy', 'freez', 'frost', 'low temp', 'sleet', 'snow', 'wint')='COLD / ICE';
c('below normal precip', 'dry', 'drie', 'drought', 'fire', 'heat', 'high temp', 'hot', 'warm')
='HEAT / DROUGHT / FIRE';
c('fog', 'vog')='FOG';
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain',
'rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
='RAIN / FLOOD / HIGH SEAS';
c('burst', 'cloud', 'depression', 'floyd', 'funnel', 'gust', 'hail', 'hurricane', 'landspout',
'storm', 'southeast', 'thunderstorm', 'thundertsorm', 'thundestorm', 'tornado', 'torndao', 'tstm', 'turbulence', 'typhoon',
'wall', 'waterspout', 'water spout', 'wayterspout', 'wind', 'wnd')
='WIND / STORM / TORNADO';
c('lightning', 'ligntning', 'lighting')='LIGHTNING';
c('tsunami', 'volcan')='VOLCANIC ERUPTION / EARTHQUAKE / TSUNAMI';
c('dust')='DUST'"))
Data$EVTYPE<-with(Data,recode(EVTYPE,"
c('avalanche', 'avalance', 'blizzard', 'chill', 'cold', 'cool', 'glaze', 'hypothermia', 'hyperthermia',
'ice', 'icy', 'freez', 'frost', 'low temp', 'sleet', 'snow', 'wint')='COLD / ICE';
c('below normal precip', 'dry', 'drie', 'drought', 'fire', 'heat', 'high temp', 'hot', 'warm')
='HEAT / DROUGHT / FIRE';
c('fog', 'vog')='FOG';
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain',
'rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')='RAIN / FLOOD / HIGH SEAS';
c('burst', 'cloud', 'depression', 'floyd', 'funnel', 'gust', 'hail', 'hurricane', 'landspout',
'storm', 'southeast', 'thunderstorm', 'thundertsorm', 'thundestorm', 'tornado', 'torndao', 'tstm', 'turbulence', 'typhoon',
'wall', 'waterspout', 'water spout', 'wayterspout', 'wind', 'wnd')
='WIND / STORM / TORNADO';
c('lightning', 'ligntning', 'lighting')='LIGHTNING';
c('tsunami', 'volcan')='VOLCANIC ERUPTION / EARTHQUAKE / TSUNAMI';
c('dust')='DUST'"))
RAIN / FLOOD / HIGH SEAS = c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain',
'rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
LIGHTNING = c('lightning', 'ligntning', 'lighting')
RAIN / FLOOD / HIGH SEAS = c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake')
RAIN / FLOOD / HIGH SEAS = c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood')
RAIN / FLOOD / HIGH SEAS = c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake',
)
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water', 'river', 'rogue wave', 'slide')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain','rising water', 'river', 'rogue wave', 'slide', stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')
Data$EVTYPE<-with(Data,recode(EVTYPE,"
c('avalanche', 'avalance', 'blizzard', 'chill', 'cold', 'cool', 'glaze', 'hypothermia', 'hyperthermia',
'ice', 'icy', 'freez', 'frost', 'low temp', 'sleet', 'snow', 'wint')='COLD / ICE';
c('below normal precip', 'dry', 'drie', 'drought', 'fire', 'heat', 'high temp', 'hot', 'warm')
='HEAT / DROUGHT / FIRE';
c('fog', 'vog')='FOG';
c('coast', 'cstl', 'current', 'dam fail', 'dam break', 'drizzle', 'drown', 'erosion', 'erosin',
'flood', 'floood', 'fld', 'heavy shower', 'high water', 'high waves', 'lake', 'landslump', 'marine', 'precip', 'rain',
'rising water', 'river', 'rogue wave', 'slide', 'stream', 'sea', 'seiche', 'surf', 'swell', 'tide', 'tidal', 'torrent', 'wet')='RAIN / FLOOD / HIGH SEAS';
c('burst', 'cloud', 'depression', 'floyd', 'funnel', 'gust', 'hail', 'hurricane', 'landspout',
'storm', 'southeast', 'thunderstorm', 'thundertsorm', 'thundestorm', 'tornado', 'torndao', 'tstm', 'turbulence', 'typhoon',
'wall', 'waterspout', 'water spout', 'wayterspout', 'wind', 'wnd')
='WIND / STORM / TORNADO';
c('lightning', 'ligntning', 'lighting')='LIGHTNING';
c('tsunami', 'volcan')='VOLCANIC ERUPTION / EARTHQUAKE / TSUNAMI';
c('dust')='DUST'"))
View(Data)
with(Data,levels(EVTYPE))
with(Data,levels(EVTYPE))
tablaEVTYPE<-with(Data,sort(table(EVTYPE),decreasing=T))
tablaEVTYPE
b1<-barplot(tablaEVTYPE,horiz=TRUE,las=1,xlim=c(0,100),
main=" ",
xlab=" ")
tablaEVTYPE
